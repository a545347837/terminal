// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: terminal.proto

#include "terminal.pb.h"
#include "terminal.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace terminal {

static const char* TerminalService_method_names[] = {
  "/terminal.TerminalService/login",
  "/terminal.TerminalService/registerUser",
};

std::unique_ptr< TerminalService::Stub> TerminalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TerminalService::Stub> stub(new TerminalService::Stub(channel));
  return stub;
}

TerminalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_login_(TerminalService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_registerUser_(TerminalService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::terminal::Result>* TerminalService::Stub::loginRaw(::grpc::ClientContext* context, const ::terminal::UserRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::terminal::Result>::Create(channel_.get(), rpcmethod_login_, context, request);
}

void TerminalService::Stub::experimental_async::login(::grpc::ClientContext* context, ::terminal::UserRequest* request, ::grpc::experimental::ClientReadReactor< ::terminal::Result>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::terminal::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::terminal::Result>* TerminalService::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::terminal::UserRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::terminal::Result>::Create(channel_.get(), cq, rpcmethod_login_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::terminal::Result>* TerminalService::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::terminal::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::terminal::Result>::Create(channel_.get(), cq, rpcmethod_login_, context, request, false, nullptr);
}

::grpc::Status TerminalService::Stub::registerUser(::grpc::ClientContext* context, const ::terminal::UserRequest& request, ::terminal::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registerUser_, context, request, response);
}

void TerminalService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::terminal::UserRequest* request, ::terminal::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, std::move(f));
}

void TerminalService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::terminal::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, std::move(f));
}

void TerminalService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::terminal::UserRequest* request, ::terminal::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, reactor);
}

void TerminalService::Stub::experimental_async::registerUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::terminal::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::terminal::Result>* TerminalService::Stub::AsyncregisterUserRaw(::grpc::ClientContext* context, const ::terminal::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::terminal::Result>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::terminal::Result>* TerminalService::Stub::PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::terminal::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::terminal::Result>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, false);
}

TerminalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TerminalService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TerminalService::Service, ::terminal::UserRequest, ::terminal::Result>(
          [](TerminalService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::terminal::UserRequest* req,
             ::grpc_impl::ServerWriter<::terminal::Result>* writer) {
               return service->login(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TerminalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TerminalService::Service, ::terminal::UserRequest, ::terminal::Result>(
          [](TerminalService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::terminal::UserRequest* req,
             ::terminal::Result* resp) {
               return service->registerUser(ctx, req, resp);
             }, this)));
}

TerminalService::Service::~Service() {
}

::grpc::Status TerminalService::Service::login(::grpc::ServerContext* context, const ::terminal::UserRequest* request, ::grpc::ServerWriter< ::terminal::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TerminalService::Service::registerUser(::grpc::ServerContext* context, const ::terminal::UserRequest* request, ::terminal::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace terminal

